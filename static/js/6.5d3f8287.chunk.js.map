{"version":3,"sources":["assets/audio/ohmyGODD.mp3","components/games/mind-meld/MildMeldRules.component.tsx","assets/audio/counting-down.mp3","assets/audio/ding-ding-ding.mp3","components/games/mind-meld/MindMeldTimer/MildMeldTimer.component.tsx","components/games/mind-meld/MindMeldTimer/MindMeldDisplay.tsx","components/games/mind-meld/MindMeldTimer/MindMeldMain.component.tsx","components/games/mind-meld/BeginMindMeld.component.tsx","components/games/mind-meld/MindMeld.component.tsx"],"names":["MildMeldRules","props","onStart","Typography","variant","Button","color","onClick","MindMeldTimer","handleIsWordSpitStage","countdownSeconds","useState","seconds","setSeconds","timerStarted","setTimerStarted","Howl","src","countingDown","volume","countingDownSound","useEffect","timer","play","setInterval","prevSeconds","clearInterval","endOfTimerSound","dingSound","stop","Box","sx","display","flexDirection","justifyContent","alignItems","marginBottom","disabled","MildMeldDisplay","isWordSpitStage","style","fontWeight","getRandomElementFromArray","MindMeldMain","setIsWordSpitStage","BeginMindMeld","position","top","right","fontSize","MeldMeld","mindMeldStarted","setMindMeldStarted","ohMaGawd"],"mappings":"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","file":"static/js/6.5d3f8287.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ohmyGODD.52338919.mp3\";","// Typography\nimport { Typography } from \"@mui/material\";\n\n// Components\nimport Button from \"@mui/material/Button\";\n\nconst MildMeldRules = (props: any) => {\n  const { onStart } = props;\n  return (\n    <>\n      <Typography variant=\"h1\">\n        <b>RULES</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Players have to look at each other, count to 5, then say a word.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        The premise of the game is to then say a word that <b>coincides</b> with\n        the words that you guys have just mentioned.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        For example, someone says <b>“ball”</b> and the other player says{\" \"}\n        <b>“dog”</b>, a resulting common word could be <b>“Fetch”</b>!\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Each time the announced word doesn’t match, the players have to{\" \"}\n        <b>take a drink.</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">Pretty simple, aye?</Typography>\n\n      <Button variant=\"contained\" color=\"secondary\" onClick={onStart}>\n        Let's begin shall we?\n      </Button>\n    </>\n  );\n};\n\nexport default MildMeldRules;\n","export default __webpack_public_path__ + \"static/media/counting-down.dde83d52.mp3\";","export default __webpack_public_path__ + \"static/media/ding-ding-ding.d7f71e86.mp3\";","import { Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { Howl } from \"howler\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\n\n// Sound\nimport ohMaGod from \"assets/audio/ohmyGODD.mp3\";\nimport countingDown from \"assets/audio/counting-down.mp3\";\nimport dingSound from \"assets/audio/ding-ding-ding.mp3\";\n\n/**\n * * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n * Contains countdown logic\n ** Passes data back up to controller\n ** contains 2 control variables\n *** isWordSpitStage\n * Contains button that changes based on what stage of countdown\n * Countdown logic:\n * timerStarted is tagged to handling isWordSpitStage, diabling of button and text content of button\n */\nconst MindMeldTimer = (props: any) => {\n  const { handleIsWordSpitStage, countdownSeconds = 3 } = props;\n  const [seconds, setSeconds] = useState(countdownSeconds); // for updating displayed seconds and when to stop timer\n  const [timerStarted, setTimerStarted] = useState(false); // control for starting and stopping the timer\n  const [countingDownSound, setCountingDownSound] = useState(\n    new Howl({\n      src: [countingDown],\n      volume: 1.5\n    })\n  );\n\n  // countdown timer logic\n  useEffect(() => {\n    let timer: any = null;\n\n    // Countdown when timer has started\n    if (timerStarted) {\n      countingDownSound.play();\n      timer = setInterval(() => {\n        setSeconds((prevSeconds: any) => prevSeconds - 1);\n      }, 1000);\n    }\n\n    // Stops timer from counting down again when it resets from 0 to countdownSeconds\n    if (!timerStarted) {\n      clearInterval(timer);\n    }\n\n    // clear interval set outside instead of inside the interval.\n    // obviously you don't set clearInterval inside the interval itself\n    if (seconds <= 0) {\n      clearInterval(timer);\n      // sets a timer reset (variable to stop timer from running again when hits 3)\n      // because when seconds is set to countdownSeconds with useState\n      // useEffect code runs again and sets another interval, therefore starting our countdown again\n      // so we quickly clear the timer (interval) when the code runs again\n      // to prevent countdown when\n      const endOfTimerSound = new Howl({\n        src: [dingSound],\n      });\n      countingDownSound.stop();\n      endOfTimerSound.play();\n      setTimerStarted(false); // stop timer\n      setSeconds(countdownSeconds); // set\n    }\n\n    return () => clearInterval(timer); // to clear interval when component unmounts\n  }, [seconds, countdownSeconds, timerStarted, countingDownSound]);\n\n  // Begins timer\n  const startTimer = () => {\n    setTimerStarted(true);\n  };\n\n  // Logic for passing data back up to controller to control display\n  if (timerStarted) {\n    handleIsWordSpitStage(false);\n  } else {\n    handleIsWordSpitStage(true);\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Typography variant=\"h5\">\n        Countdown to Dranks:{\" \"}\n        <Typography variant=\"h4\" sx={{ marginBottom: 0 }}>\n          <b>{seconds}</b>\n        </Typography>\n      </Typography>\n      <Button\n        onClick={startTimer}\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled={timerStarted}\n      >\n        {timerStarted\n          ? \"Get those creative juices flowin!!\"\n          : \"START ZE COUNTDOWN!\"}\n      </Button>\n    </Box>\n  );\n};\n\nexport default MindMeldTimer;\n","import Typography from \"@mui/material/Typography\";\nimport { getRandomElementFromArray } from \"helpers/helpers\";\n\n/**\n * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage.\n * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * Text to display controlled by passing data from parent MildMeldMain\n */\nconst MildMeldDisplay = ({ isWordSpitStage }: { isWordSpitStage: boolean }) => {\n  const wordSpitStagePrompts = [\n    \"Cough up a random word!\",\n    \"Mmm... what rhymes with orange...\",\n    \"Just... say anything, really\",\n  ]; // prompts before timer begins\n  const similarWordStagePrompts = [\n    \"C'mon, get your similarities pumpin!!\",\n    \"WHAT THE COMMON THANG!!\",\n    \"CHANNEL YOUR INNER COMPATIBILTIES\",\n    \"ACTIVATE TELEPATHIC POWERS\"\n  ]; // prompts when timer is counting down\n  return (\n    <Typography variant=\"h2\" style={{ fontWeight: \"bold\" }}>\n      {isWordSpitStage\n        ? getRandomElementFromArray(wordSpitStagePrompts)\n        : getRandomElementFromArray(similarWordStagePrompts)}\n    </Typography>\n  );\n};\n\nexport default MildMeldDisplay;\n","// Custom Components\nimport MindMeldTimer from \"./MildMeldTimer.component\";\nimport MildMeldDisplay from \"./MindMeldDisplay\";\n\nimport { useState } from \"react\";\n/**\n * Controller that passes data from timer to display.\n * Purpose of this component is to Set a timer for users to...\n * First shout a new word together\n * Second, shout a word that joins both words\n    * Control variable that decides \"is wordSpit / isNotWordSpit (aka similar-word)\" stage\n    * There should be...\n        * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n            * Contains countdown logic\n            * Contains button that changes based on what stage of countdown logic\n            * if isCountingDown === disabled\n            * Changes content based on whether user is at 2 person word-spit stage or 2 person similar-word stage\n            * Countdown logic:\n                * isCountingDown: inbetween 3 - 0 seconds\n        * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage\n            * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n            * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * @param props\n * @returns React.FC\n */\nconst MindMeldMain = (props: any) => {\n  const [isWordSpitStage, setIsWordSpitStage] = useState(true); // set to true because we always start the game with word-spit stage\n\n  const handleIsWordSpitStage = (isWordSpitStage: boolean) => {\n    setIsWordSpitStage(isWordSpitStage);\n  }\n\n  return <>\n    <MildMeldDisplay isWordSpitStage={isWordSpitStage}/>\n    <MindMeldTimer countdownSeconds={5} handleIsWordSpitStage={handleIsWordSpitStage}/>\n  </>;\n};\n\nexport default MindMeldMain;\n","// Typography\nimport { Typography } from \"@mui/material\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\n\n// Custom-Components\nimport MindMeldMain from \"./MindMeldTimer/MindMeldMain.component\";\n\nconst BeginMindMeld = (props: any) => {\n  const { onClick } = props;\n  return (\n    <>\n      <MindMeldMain />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={onClick}\n        sx={{ position: \"fixed\", top: \"10px\", right: \"10px\" }}\n      >\n        <Typography\n          variant=\"subtitle1\"\n          sx={{ marginBottom: 0, fontSize: \"0.8rem\" }}\n        >\n          ... If you ever need the rules again\n        </Typography>\n      </Button>\n    </>\n  );\n};\n\nexport default BeginMindMeld;\n","import { useState } from \"react\";\nimport { Howl } from \"howler\";\n\n// Audio\nimport ohMaGawd from \"assets/audio/ohmyGODD.mp3\";\n\n// Layout\nimport PageLayout from \"layout/PageLayout.component\";\n\n// Components\nimport MildMeldRules from \"./MildMeldRules.component\";\nimport BeginMindMeld from \"./BeginMindMeld.component\";\n\nconst MeldMeld = (props: any) => {\n  const [mindMeldStarted, setMindMeldStarted] = useState(false);\n\n  const startMindMeld = () => {\n    setMindMeldStarted(true);\n  };\n\n  const goToReadRules = () => {\n    const ohMaGodSound = new Howl({\n      src: [ohMaGawd]\n    });\n    ohMaGodSound.play();\n    setMindMeldStarted(false);\n  };\n\n  return (\n    <PageLayout>\n      {mindMeldStarted ? (\n        <BeginMindMeld onClick={goToReadRules}/>\n      ) : (\n        <MildMeldRules onStart={startMindMeld} />\n      )}\n    </PageLayout>\n  );\n};\n\nexport default MeldMeld;\n"],"sourceRoot":""}