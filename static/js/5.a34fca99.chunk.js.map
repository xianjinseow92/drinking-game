{"version":3,"sources":["../node_modules/@mui/material/Typography/typographyClasses.js","../node_modules/@mui/material/Typography/Typography.js","components/games/mind-meld/MildMeldRules.component.tsx","components/games/mind-meld/MindMeldTimer/MildMeldTimer.component.tsx","components/games/mind-meld/MindMeldTimer/MindMeldDisplay.tsx","components/games/mind-meld/MindMeldTimer/MindMeldMain.component.tsx","components/games/mind-meld/BeginMindMeld.component.tsx","components/games/mind-meld/MindMeld.component.tsx"],"names":["getTypographyUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TypographyRoot","styled","name","overridesResolver","props","styles","ownerState","root","variant","align","capitalize","noWrap","gutterBottom","paragraph","theme","_extends","margin","typography","textAlign","overflow","textOverflow","whiteSpace","marginBottom","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","colorTransformations","primary","textPrimary","secondary","textSecondary","error","Typography","React","inProps","ref","themeProps","useThemeProps","color","transformDeprecatedColors","extendSxProp","className","component","variantMapping","other","_objectWithoutPropertiesLoose","Component","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","MildMeldRules","onStart","Button","onClick","MindMeldTimer","handleIsWordSpitStage","countdownSeconds","useState","seconds","setSeconds","timerStarted","setTimerStarted","useEffect","timer","setInterval","prevSeconds","clearInterval","Box","sx","display","flexDirection","justifyContent","alignItems","disabled","MildMeldDisplay","isWordSpitStage","style","fontWeight","getRandomElementFromArray","MindMeldMain","setIsWordSpitStage","BeginMindMeld","position","top","right","fontSize","MeldMeld","mindMeldStarted","setMindMeldStarted"],"mappings":"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","file":"static/js/5.a34fca99.chunk.js","sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"align\", \"className\", \"component\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\n\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0\n}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {\n  textAlign: ownerState.align\n}, ownerState.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, ownerState.gutterBottom && {\n  marginBottom: '0.35em'\n}, ownerState.paragraph && {\n  marginBottom: 16\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6\n\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\n\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\n\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const color = transformDeprecatedColors(themeProps.color);\n  const props = extendSxProp(_extends({}, themeProps, {\n    color\n  }));\n\n  const {\n    align = 'inherit',\n    className,\n    component,\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default Typography;","// Typography\nimport { Typography } from \"@mui/material\";\n\n// Components\nimport Button from \"@mui/material/Button\";\n\nconst MildMeldRules = (props: any) => {\n  const { onStart } = props;\n  return (\n    <>\n      <Typography variant=\"h1\">\n        <b>RULES</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Players have to look at each other, count to 3, then say a word.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        The premise of the game is to then say a word that <b>coincides</b> with\n        the words that you guys have just mentioned.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        For example, someone says <b>“ball”</b>and the other player says{\" \"}\n        <b>“dog”</b>, a resulting common word <b>could be</b> <b>“Fetch”</b>!\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Each time the announced word doesn’t match, the players have to{\" \"}\n        <b>take a drink.</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">Pretty simple, aye?</Typography>\n\n      <Button variant=\"contained\" color=\"secondary\" onClick={onStart}>\n        Let's begin shall we?\n      </Button>\n    </>\n  );\n};\n\nexport default MildMeldRules;\n","import { Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\n\n/**\n * * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n * Contains countdown logic\n ** Passes data back up to controller\n ** contains 2 control variables\n *** isWordSpitStage\n * Contains button that changes based on what stage of countdown\n * Countdown logic:\n * timerStarted is tagged to handling isWordSpitStage, diabling of button and text content of button\n */\nconst MindMeldTimer = (props: any) => {\n  const { handleIsWordSpitStage, countdownSeconds = 3 } = props;\n  const [seconds, setSeconds] = useState(countdownSeconds); // for updating displayed seconds and when to stop timer\n  const [timerStarted, setTimerStarted] = useState(false); // control for starting and stopping the timer\n\n  // countdown timer logic\n  useEffect(() => {\n    let timer: any = null;\n\n    // Countdown when timer has started\n    if (timerStarted) {\n      timer = setInterval(() => {\n        setSeconds((prevSeconds: any) => prevSeconds - 1);\n      }, 1000);\n    }\n\n    // Stops timer from counting down again when it resets from 0 to countdownSeconds\n    if (!timerStarted) {\n      clearInterval(timer);\n    }\n\n    // clear interval set outside instead of inside the interval.\n    // obviously you don't set clearInterval inside the interval itself\n    if (seconds <= 0) {\n      clearInterval(timer);\n      // sets a timer reset (variable to stop timer from running again when hits 3)\n      // because when seconds is set to countdownSeconds with useState\n      // useEffect code runs again and sets another interval, therefore starting our countdown again\n      // so we quickly clear the timer (interval) when the code runs again\n      // to prevent countdown when\n      setTimerStarted(false); // stop timer\n      setSeconds(countdownSeconds); // set\n    }\n\n    return () => clearInterval(timer); // to clear interval when component unmounts\n  }, [seconds, countdownSeconds, timerStarted]);\n\n  // Begins timer\n  const startTimer = () => {\n    setTimerStarted(true);\n  };\n\n  // Logic for passing data back up to controller to control display\n  if (timerStarted) {\n    handleIsWordSpitStage(false);\n  } else {\n    handleIsWordSpitStage(true);\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Typography variant=\"h5\">\n        Countdown to Dranks:{\" \"}\n        <Typography variant=\"h4\" sx={{ marginBottom: 0 }}>\n          <b>{seconds}</b>\n        </Typography>\n      </Typography>\n      <Button\n        onClick={startTimer}\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled={timerStarted}\n      >\n        {timerStarted\n          ? \"Get those creative juices flowin!!\"\n          : \"START ZE COUNTDOWN!\"}\n      </Button>\n    </Box>\n  );\n};\n\nexport default MindMeldTimer;\n","import Typography from \"@mui/material/Typography\";\nimport { getRandomElementFromArray } from \"helpers/helpers\";\n\n/**\n * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage.\n * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * Text to display controlled by passing data from parent MildMeldMain\n */\nconst MildMeldDisplay = ({ isWordSpitStage }: { isWordSpitStage: boolean }) => {\n  const wordSpitStagePrompts = [\n    \"Cough up a random word!\",\n    \"Mmm... what rhymes with orange...\",\n    \"Just... say anything, really\",\n  ]; // prompts before timer begins\n  const similarWordStagePrompts = [\n    \"C'mon, get your similarities pumpin!!\",\n    \"WHAT THE COMMON THANG!!\",\n    \"CHANNEL YOUR INNER COMPATIBILTIES\",\n    \"ACTIVATE TELEPATHIC POWERS\"\n  ]; // prompts when timer is counting down\n  return (\n    <Typography variant=\"h2\" style={{ fontWeight: \"bold\" }}>\n      {isWordSpitStage\n        ? getRandomElementFromArray(wordSpitStagePrompts)\n        : getRandomElementFromArray(similarWordStagePrompts)}\n    </Typography>\n  );\n};\n\nexport default MildMeldDisplay;\n","// Custom Components\nimport MindMeldTimer from \"./MildMeldTimer.component\";\nimport MildMeldDisplay from \"./MindMeldDisplay\";\n\nimport { useState } from \"react\";\n/**\n * Controller that passes data from timer to display.\n * Purpose of this component is to Set a timer for users to...\n * First shout a new word together\n * Second, shout a word that joins both words\n    * Control variable that decides \"is wordSpit / isNotWordSpit (aka similar-word)\" stage\n    * There should be...\n        * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n            * Contains countdown logic\n            * Contains button that changes based on what stage of countdown logic\n            * if isCountingDown === disabled\n            * Changes content based on whether user is at 2 person word-spit stage or 2 person similar-word stage\n            * Countdown logic:\n                * isCountingDown: inbetween 3 - 0 seconds\n        * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage\n            * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n            * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * @param props\n * @returns React.FC\n */\nconst MindMeldMain = (props: any) => {\n  const [isWordSpitStage, setIsWordSpitStage] = useState(true); // set to true because we always start the game with word-spit stage\n\n  const handleIsWordSpitStage = (isWordSpitStage: boolean) => {\n    setIsWordSpitStage(isWordSpitStage);\n  }\n\n  return <>\n    <MildMeldDisplay isWordSpitStage={isWordSpitStage}/>\n    <MindMeldTimer handleIsWordSpitStage={handleIsWordSpitStage}/>\n  </>;\n};\n\nexport default MindMeldMain;\n","// Typography\nimport { Typography } from \"@mui/material\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\n\n// Custom-Components\nimport MindMeldMain from \"./MindMeldTimer/MindMeldMain.component\";\n\nconst BeginMindMeld = (props: any) => {\n  const { onClick } = props;\n  return (\n    <>\n      <MindMeldMain />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={onClick}\n        sx={{ position: \"fixed\", top: \"10px\", right: \"10px\" }}\n      >\n        <Typography\n          variant=\"subtitle1\"\n          sx={{ marginBottom: 0, fontSize: \"0.8rem\" }}\n        >\n          ... If you ever need the rules again\n        </Typography>\n      </Button>\n    </>\n  );\n};\n\nexport default BeginMindMeld;\n","import { useState } from \"react\";\n\n// Layout\nimport PageLayout from \"layout/PageLayout.component\";\n\n// Components\nimport MildMeldRules from \"./MildMeldRules.component\";\nimport BeginMindMeld from \"./BeginMindMeld.component\";\n\nconst MeldMeld = (props: any) => {\n  const [mindMeldStarted, setMindMeldStarted] = useState(false);\n\n  const startMindMeld = () => {\n    setMindMeldStarted(true);\n  };\n\n  const goToReadRules = () => {\n    setMindMeldStarted(false);\n  };\n\n  return (\n    <PageLayout>\n      {mindMeldStarted ? (\n        <BeginMindMeld onClick={goToReadRules}/>\n      ) : (\n        <MildMeldRules onStart={startMindMeld} />\n      )}\n    </PageLayout>\n  );\n};\n\nexport default MeldMeld;\n"],"sourceRoot":""}