{"version":3,"sources":["assets/audio/ohmyGODD.mp3","components/games/mind-meld/MildMeldRules.component.tsx","components/games/mind-meld/MindMeldTimer/TimerChangeButtons.tsx","assets/audio/ding-ding-ding.mp3","components/games/mind-meld/MindMeldTimer/MildMeldTimer.component.tsx","components/games/mind-meld/MindMeldTimer/MindMeldDisplay.tsx","assets/audio/counting-down.mp3","components/games/mind-meld/MindMeldTimer/MindMeldMain.component.tsx","components/games/mind-meld/BeginMindMeld.component.tsx","components/games/mind-meld/MindMeld.component.tsx"],"names":["MildMeldRules","props","onStart","countdownSeconds","Typography","variant","Button","color","onClick","TimerChangeButtons","timerStarted","setCountdownSeconds","countdownSecondsOptions","React","useState","drawerIsOpen","setDrawerIsOpen","toggleDrawer","open","event","setCountdownSecs","e","buttonNumber","target","outerText","Box","sx","position","right","bottom","zIndex","IconButton","disabled","size","fontSize","Drawer","anchor","onClose","display","width","flexDirection","justifyContent","alignItems","gap","padding","backgroundColor","marginBottom","map","second","MindMeldTimer","handleIsWordSpitStage","countingDownAudio","seconds","setSeconds","setTimerStarted","useEffect","timer","setInterval","prevSeconds","clearInterval","endOfTimerSound","Howl","src","dingSound","html5","stop","play","MildMeldDisplay","isWordSpitStage","style","fontWeight","getRandomElementFromArray","MindMeldMain","setIsWordSpitStage","countingDown","volume","countingDownSound","BeginMindMeld","top","MeldMeld","mindMeldStarted","setMindMeldStarted","ohMaGawd"],"mappings":"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","file":"static/js/6.db90e29a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ohmyGODD.52338919.mp3\";","// Typography\nimport { Typography } from \"@mui/material\";\n\n// Components\nimport Button from \"@mui/material/Button\";\n\nconst MildMeldRules = (props: any) => {\n  const { onStart, countdownSeconds } = props;\n  return (\n    <>\n      <Typography variant=\"h1\">\n        <b>RULES</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Players have to look at each other, count to {countdownSeconds}, then\n        say a word.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        The premise of the game is to then say a word that <b>coincides</b> with\n        the words that you guys have just mentioned.\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        For example, someone says <b>“ball”</b> and the other player says{\" \"}\n        <b>“dog”</b>, a resulting common word could be <b>“Fetch”</b>!\n      </Typography>\n\n      <Typography variant=\"subtitle1\">\n        Each time the announced word doesn’t match, the players have to{\" \"}\n        <b>take a drink.</b>\n      </Typography>\n\n      <Typography variant=\"subtitle1\">Pretty simple, aye?</Typography>\n\n      <Button variant=\"contained\" color=\"secondary\" onClick={onStart}>\n        Let's begin shall we?\n      </Button>\n    </>\n  );\n};\n\nexport default MildMeldRules;\n","// UI-Components\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\n\n// Icons\nimport AlarmIcon from \"@mui/icons-material/Alarm\";\n\n// Custom Components\nimport Drawer from \"@mui/material/Drawer\";\n\n// Typography\nimport { Typography } from \"@mui/material\";\nimport React from \"react\";\n\nconst TimerChangeButtons = (props: any) => {\n  const { timerStarted, setCountdownSeconds } = props;\n  const countdownSecondsOptions = [3, 4, 5];\n  const [drawerIsOpen, setDrawerIsOpen] = React.useState(false);\n\n  const toggleDrawer =\n    (open: any) => (event: React.KeyboardEvent | React.MouseEvent) => {\n      setDrawerIsOpen(open);\n    };\n\n  const setCountdownSecs = (e: any) => {\n    const buttonNumber = +e.target.outerText;\n    setCountdownSeconds(+buttonNumber); // set seconds for countdown timer to use\n    setDrawerIsOpen(false); // close drawer after option selected\n  };\n\n  const countdownTimersInterface = () => {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          width: \"100%\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          gap: \"10px\",\n          padding: \"10px\",\n          backgroundColor: \"transparent\",\n        }}\n      >\n        <Typography variant=\"h3\" sx={{ marginBottom: 0 }}>\n          Select Difficulty\n        </Typography>\n        <Box\n          sx={{\n            display: \"flex\",\n            width: \"50%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            gap: \"10px\",\n          }}\n        >\n          {countdownSecondsOptions.map((second) => {\n            return (\n              <Button\n                onClick={setCountdownSecs}\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={timerStarted}\n                key={second}\n                size=\"small\"\n              >\n                {second}\n              </Button>\n            );\n          })}\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        position: \"absolute\",\n        right: \"5px\",\n        bottom: \"0px\",\n        zIndex: 1000,\n      }}\n    >\n      <IconButton\n        color=\"secondary\"\n        onClick={toggleDrawer(true)}\n        disabled={timerStarted}\n        size=\"large\"\n      >\n        <AlarmIcon fontSize=\"large\" />\n      </IconButton>\n      <Drawer\n        anchor={\"bottom\"}\n        open={drawerIsOpen}\n        onClose={toggleDrawer(false)}\n      >\n        {countdownTimersInterface()}\n      </Drawer>\n    </Box>\n  );\n};\n\nexport default TimerChangeButtons;\n","export default __webpack_public_path__ + \"static/media/ding-ding-ding.d7f71e86.mp3\";","import { Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { Howl } from \"howler\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\n\n// Custom Components\nimport TimerChangeButtons from \"./TimerChangeButtons\";\n\n// Sound\nimport dingSound from \"assets/audio/ding-ding-ding.mp3\";\n\n/**\n * * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n * Contains countdown logic\n ** Passes data back up to controller\n ** contains 2 control variables\n *** isWordSpitStage\n * Contains button that changes based on what stage of countdown\n * Countdown logic:\n * timerStarted is tagged to handling isWordSpitStage, diabling of button and text content of button\n */\nconst MindMeldTimer = (props: any) => {\n  const {\n    handleIsWordSpitStage,\n    countdownSeconds,\n    setCountdownSeconds,\n    countingDownAudio, // counting down audio placed above this component to allow it to keep playing when timer mounts and unmounts\n  } = props;\n  const [seconds, setSeconds] = useState(countdownSeconds); // for updating displayed seconds and when to stop timer\n  const [timerStarted, setTimerStarted] = useState(false); // control for starting and stopping the timer\n\n  // countdown timer logic\n  useEffect(() => {\n    let timer: any = null;\n\n    // Countdown when timer has started\n    if (timerStarted) {\n      timer = setInterval(() => {\n        setSeconds((prevSeconds: any) => prevSeconds - 1);\n      }, 1000);\n    }\n\n    // Stops timer from counting down again when it resets from 0 to countdownSeconds\n    if (!timerStarted) {\n      clearInterval(timer);\n    }\n\n    // clear interval set outside instead of inside the interval.\n    // obviously you don't set clearInterval inside the interval itself\n    if (seconds <= 0) {\n      clearInterval(timer);\n      // sets a timer reset (variable to stop timer from running again when hits 3)\n      // because when seconds is set to countdownSeconds with useState\n      // useEffect code runs again and sets another interval, therefore starting our countdown again\n      // so we quickly clear the timer (interval) when the code runs again\n      // to prevent countdown when\n      const endOfTimerSound = new Howl({\n        src: [dingSound],\n        html5: true,\n      });\n      countingDownAudio.stop();\n      endOfTimerSound.play();\n      setTimerStarted(false); // stop timer\n      setSeconds(countdownSeconds); // reset seconds back to OG\n    }\n\n    return () => clearInterval(timer); // to clear interval when component unmounts\n  }, [seconds, countdownSeconds, timerStarted, countingDownAudio]);\n\n  // For when user decides to change the timer\n  useEffect(() => {\n    setSeconds(countdownSeconds);\n  }, [countdownSeconds]);\n\n  // Begins timer\n  const startTimer = () => {\n    countingDownAudio.play();\n    setTimerStarted(true);\n  };\n\n  // Logic for passing data back up to controller to control display\n  if (timerStarted) {\n    handleIsWordSpitStage(false);\n  } else {\n    handleIsWordSpitStage(true);\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: \"100%\"\n      }}\n    >\n      <Typography variant=\"h5\">\n        Countdown to Dranks:{\" \"}\n        <Typography variant=\"h4\" sx={{ marginBottom: 0 }}>\n          <b>{seconds}</b>\n        </Typography>\n      </Typography>\n      <Button\n        onClick={startTimer}\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled={timerStarted}\n      >\n        {timerStarted\n          ? \"Get those creative juices flowin!!\"\n          : \"START ZE COUNTDOWN!\"}\n      </Button>\n      <TimerChangeButtons\n        timerStarted={timerStarted}\n        setCountdownSeconds={setCountdownSeconds}\n      />\n    </Box>\n  );\n};\n\nexport default MindMeldTimer;\n","import Typography from \"@mui/material/Typography\";\nimport { getRandomElementFromArray } from \"helpers/helpers\";\n\n/**\n * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage.\n * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * Text to display controlled by passing data from parent MildMeldMain\n */\nconst MildMeldDisplay = ({ isWordSpitStage }: { isWordSpitStage: boolean }) => {\n  const wordSpitStagePrompts = [\n    \"Cough up a random word!\",\n    \"Mmm... what rhymes with orange...\",\n    \"Just... say anything, really\",\n  ]; // prompts before timer begins\n  const similarWordStagePrompts = [\n    \"C'mon, get your similarities pumpin!!\",\n    \"WHAT THE COMMON THANG!!\",\n    \"CHANNEL YOUR INNER COMPATIBILTIES\",\n    \"ACTIVATE TELEPATHIC POWERS\"\n  ]; // prompts when timer is counting down\n  return (\n    <Typography variant=\"h2\" style={{ fontWeight: \"bold\" }}>\n      {isWordSpitStage\n        ? getRandomElementFromArray(wordSpitStagePrompts)\n        : getRandomElementFromArray(similarWordStagePrompts)}\n    </Typography>\n  );\n};\n\nexport default MildMeldDisplay;\n","export default __webpack_public_path__ + \"static/media/counting-down.dde83d52.mp3\";","// Custom Components\nimport MindMeldTimer from \"./MildMeldTimer.component\";\nimport MildMeldDisplay from \"./MindMeldDisplay\";\n\nimport { useEffect, useState } from \"react\";\nimport { Howl } from \"howler\";\nimport countingDown from \"assets/audio/counting-down.mp3\";\n/**\n * Controller that passes data from timer to display.\n * Purpose of this component is to Set a timer for users to...\n * First shout a new word together\n * Second, shout a word that joins both words\n * Control variable that decides \"is wordSpit / isNotWordSpit (aka similar-word)\" stage\n * There should be...\n * A countdown timer that counts down from 3 to 0 after button is clicked each time.\n * Contains countdown logic\n * Contains button that changes based on what stage of countdown logic\n * if isCountingDown === disabled\n * Changes content based on whether user is at 2 person word-spit stage or 2 person similar-word stage\n * Countdown logic:\n * isCountingDown: inbetween 3 - 0 seconds\n * A display above the countdown timer that changes depending on whether they are on the 2 person word-spit stage or 2 person similar-word stage\n * 2 person word-spit stage: \"Get ready to shout the first thing that comes to your mind...\"\n * 2 person comon-word stage: A display that randomizes, \"C'mon, get your similarities pumpin!!\" / \"WHAT THE COMMON THANG\" / \"CHANNEL YOUR INNER COMPATIBILITIES\"\n * @param props\n * @returns React.FC\n */\nconst MindMeldMain = (props: any) => {\n  const [isWordSpitStage, setIsWordSpitStage] = useState(true); // set to true because we always start the game with word-spit stage\n\n  const handleIsWordSpitStage = (isWordSpitStage: boolean) => {\n    setIsWordSpitStage(isWordSpitStage);\n  };\n\n  const { countdownSeconds, setCountdownSeconds } = props;\n\n  // Counting down sound put here instead to cut sound when go back to main games page\n  const [countingDownSound, setCountingDownSound] = useState(\n    new Howl({\n      src: [countingDown],\n      html5: true,\n      volume: 1,\n    })\n  );\n\n  // Stop sound from playing when mindmeld game is unmounted (when go back to main games page, or wtv)\n  useEffect(() => {\n    return () => {\n      countingDownSound.stop();\n    }\n  }, [countingDownSound]);\n\n  return (\n    <>\n      <MildMeldDisplay isWordSpitStage={isWordSpitStage} />\n      <MindMeldTimer\n        countingDownAudio={countingDownSound}\n        countdownSeconds={countdownSeconds}\n        setCountdownSeconds={setCountdownSeconds}\n        handleIsWordSpitStage={handleIsWordSpitStage}\n      />\n    </>\n  );\n};\n\nexport default MindMeldMain;\n","// Typography\nimport { Typography } from \"@mui/material\";\n\n// UI-Components\nimport Button from \"@mui/material/Button\";\n\n// Custom-Components\nimport MindMeldMain from \"./MindMeldTimer/MindMeldMain.component\";\n\nconst BeginMindMeld = (props: any) => {\n  const { onClick, countdownSeconds, setCountdownSeconds } = props;\n  return (\n    <>\n      <MindMeldMain countdownSeconds={countdownSeconds} setCountdownSeconds={setCountdownSeconds}/>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={onClick}\n        sx={{ position: \"fixed\", top: \"10px\", right: \"10px\" }}\n      >\n        <Typography\n          variant=\"subtitle1\"\n          sx={{ marginBottom: 0, fontSize: \"0.8rem\" }}\n        >\n          ... If you ever need the rules again\n        </Typography>\n      </Button>\n    </>\n  );\n};\n\nexport default BeginMindMeld;\n","import { useState } from \"react\";\nimport { Howl } from \"howler\";\n\n// Audio\nimport ohMaGawd from \"assets/audio/ohmyGODD.mp3\";\n\n// Layout\nimport PageLayout from \"layout/PageLayout.component\";\n\n// Components\nimport MildMeldRules from \"./MildMeldRules.component\";\nimport BeginMindMeld from \"./BeginMindMeld.component\";\n\nconst MeldMeld = (props: any) => {\n  const [mindMeldStarted, setMindMeldStarted] = useState(false);\n  const [countdownSeconds, setCountdownSeconds] = useState(5); // default countdown time is 5\n\n  const startMindMeld = () => {\n    setMindMeldStarted(true);\n  };\n\n  const goToReadRules = () => {\n    const ohMaGodSound = new Howl({\n      src: [ohMaGawd],\n      html5: true,\n    });\n    ohMaGodSound.play();\n    setMindMeldStarted(false);\n  };\n\n  return (\n    <PageLayout>\n      {mindMeldStarted ? (\n        <BeginMindMeld\n          onClick={goToReadRules}\n          countdownSeconds={countdownSeconds}\n          setCountdownSeconds={setCountdownSeconds}\n        />\n      ) : (\n        <MildMeldRules\n          onStart={startMindMeld}\n          countdownSeconds={countdownSeconds}\n        />\n      )}\n    </PageLayout>\n  );\n};\n\nexport default MeldMeld;\n"],"sourceRoot":""}